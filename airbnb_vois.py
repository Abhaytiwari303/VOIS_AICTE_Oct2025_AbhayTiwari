# -*- coding: utf-8 -*-
"""Airbnb_VOIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qn5q2mZu1z7Z-JYpCPkBC79zOhAfYFK1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

df = pd.read_excel('/content/1730285881-Airbnb_Open_Data.xlsx')

df.head()

df.info()

df.duplicated().value_counts()

df[df['neighbourhood group'] == 'brookln']

"""# Cleaning the data"""

df.drop_duplicates(inplace=True)

# Convert to string before using .str accessor
df['price'] = df['price'].astype(str)
df['service fee'] = df['service fee'].astype(str)

df['price'] = df['price'].str.replace('$', '', regex=False)
df['service fee'] = df['service fee'].str.replace('$', '', regex=False)
df['price'] = df['price'].str.replace(',', '', regex=False)
df['service fee'] = df['service fee'].str.replace(',', '', regex=False)

df.rename(columns={
    'price' : 'price_$',
    'service fee': 'service_fee_$'
    }, inplace=True)

# Drop NaNs after string cleaning
df.dropna(inplace=True)

df['price_$'] = df['price_$'].astype(float)
df['service_fee_$'] = df['service_fee_$'].astype(float) # Corrected column name
df['id'] = df['id'].astype(str)
df['host id'] = df['host id'].astype(str)
df['last review'] = pd.to_datetime(df['last review'])
df['Construction year'] = df['Construction year'].astype(int) # Corrected column name

df.loc[df['neighbourhood group'] == 'brookln', 'neighbourhood group'] = 'Brooklyn'
df = df.drop(df[df['availability 365'] > 500].index)

df.duplicated().value_counts()

df.info()

# Exploratory data Analysis(EDA)
df.describe()

property_type = df['room type'].value_counts().to_frame()
property_type

room_type_bar = px.bar(property_type, x=property_type.index, y="count", title='Room Type Distribution');
room_type_bar.show()

hood_group = df['neighbourhood group'].value_counts().to_frame()
hood_group

hood_group_bar = px.bar(hood_group, x=hood_group.index, y="count", title='Neighborhood Group Distribution');
hood_group_bar.show()

avg_price = df.groupby('neighbourhood group')['price_$'].mean().to_frame()
avg_price

avg_price_bar = px.bar(avg_price, x=avg_price.index, y="price_$", title='Average Price by Neighborhood Group');
avg_price_bar.show()

df.groupby(df['Construction year'])['price_$'].mean().to_frame().plot();
plt.xlabel('Construction Year');
plt.ylabel('Average Price');
plt.title('Average Price by Construction Year');

plt.figure(figsize=(10,6))
sns.histplot(df['price_$'], bins=100, kde=True)
plt.xlim(0, 1000)  # cap to reasonable range
plt.title("Distribution of Prices (Capped at $1000)")
plt.xlabel("Price ($)")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(x="price_$", y="service_fee_$", data=df, alpha=0.4)
plt.xlim(0, 1000)
plt.ylim(0, 500)
plt.title("Service Fee vs Price")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(x="room type", y="price_$", hue="neighbourhood group", data=df)
plt.ylim(0, 1000)
plt.title("Price Distribution by Room Type and Neighbourhood Group")
plt.show()

plt.figure(figsize=(10,6))
sns.histplot(df['availability 365'], bins=50, kde=False)
plt.title("Availability Distribution (Days Available Per Year)")
plt.xlabel("Days Available")
plt.ylabel("Number of Listings")
plt.show()

reviews_by_year = df['last review'].dt.year.value_counts().sort_index()

plt.figure(figsize=(10,6))
reviews_by_year.plot(kind='bar')
plt.title("Number of Reviews by Year")
plt.xlabel("Year")
plt.ylabel("Number of Reviews")
plt.show()

top_hosts = df['host id'].value_counts().head(10).to_frame()
top_hosts.columns = ["listing_count"]

top_hosts_bar = px.bar(top_hosts, x=top_hosts.index, y="listing_count",
                       title="Top 10 Hosts by Number of Listings")
top_hosts_bar.show()

plt.figure(figsize=(12,8))
sns.scatterplot(x="long", y="lat", hue="neighbourhood group",
                data=df, alpha=0.5, s=20)
plt.title("Airbnb Listings by Location")
plt.show()

df_cleaned = df.dropna(subset=['price_$'])
fig = px.scatter_mapbox(
    df_cleaned.sample(2000),  # sample for performance
    lat="lat", lon="long",
    color="neighbourhood group",
    size="price_$",
    hover_name="room type",
    hover_data=["price_$", "service_fee_$"],
    mapbox_style="carto-positron",
    zoom=10,
    title="Airbnb Listings Distribution"
)
fig.show()